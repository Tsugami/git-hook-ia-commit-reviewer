#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default log level if not set
COMMIT_REVIEWER_LOG_LEVEL=${COMMIT_REVIEWER_LOG_LEVEL:-"info"}

# Logger functions with colors
log_debug() {
  if [ "$COMMIT_REVIEWER_LOG_LEVEL" = "debug" ]; then
    echo -e "${BLUE}[DEBUG]${NC} $1"
  fi
}

log_info() {
  if [ "$COMMIT_REVIEWER_LOG_LEVEL" = "debug" ] || [ "$COMMIT_REVIEWER_LOG_LEVEL" = "info" ]; then
    echo -e "${GREEN}[INFO]${NC} $1"
  fi
}

log_error() {
  if [ "$COMMIT_REVIEWER_LOG_LEVEL" = "debug" ] || [ "$COMMIT_REVIEWER_LOG_LEVEL" = "info" ] || [ "$COMMIT_REVIEWER_LOG_LEVEL" = "error" ]; then
    echo -e "${RED}[ERROR]${NC} $1" >&2
  fi
}

log_warning() {
  if [ "$COMMIT_REVIEWER_LOG_LEVEL" = "debug" ] || [ "$COMMIT_REVIEWER_LOG_LEVEL" = "info" ] || [ "$COMMIT_REVIEWER_LOG_LEVEL" = "error" ]; then
    echo -e "${YELLOW}[WARNING]${NC} $1" >&2
  fi
}

# Check required commands
check_requirements() {
  local missing_deps=()
  
  if ! command -v curl &> /dev/null; then
    missing_deps+=("curl")
  fi
  
  if ! command -v jq &> /dev/null; then
    missing_deps+=("jq")
  fi
  
  if [ ${#missing_deps[@]} -ne 0 ]; then
    log_error "Missing required dependencies: ${missing_deps[*]}"
    log_error "Please install them using your package manager"
    exit 1
  fi
}

# Check API configuration
check_api_config() {
  if [ -z "$API_KEY" ]; then
    log_error "No API key found. Please set either COMMIT_REVIEWER_API_KEY or OPENAI_API_KEY environment variable."
    echo "You can set it using:"
    echo "  export COMMIT_REVIEWER_API_KEY=your_api_key"
    echo "  or"
    echo "  export OPENAI_API_KEY=your_api_key"
    exit 1
  fi
  
  if [ -z "$COMMIT_REVIEWER_API_URL" ]; then
    log_warning "COMMIT_REVIEWER_API_URL not set, using default OpenAI API URL"
  fi
}

# Initialize
check_requirements
COMMIT_MSG_FILE=$1

log_debug "Starting commit-msg hook"
log_debug "Commit message file: $COMMIT_MSG_FILE"

# Default value for skip amend validation
COMMIT_REVIEWER_SKIP_AMEND=${COMMIT_REVIEWER_SKIP_AMEND:-"true"}
log_debug "COMMIT_REVIEWER_SKIP_AMEND=$COMMIT_REVIEWER_SKIP_AMEND"

# Default value for skip WIP validation
COMMIT_REVIEWER_SKIP_WIP=${COMMIT_REVIEWER_SKIP_WIP:-"true"}
log_debug "COMMIT_REVIEWER_SKIP_WIP=$COMMIT_REVIEWER_SKIP_WIP"

# Default language for responses
COMMIT_REVIEWER_RESPONSE_LANGUAGE=${COMMIT_REVIEWER_RESPONSE_LANGUAGE:-"en"}
log_debug "COMMIT_REVIEWER_RESPONSE_LANGUAGE=$COMMIT_REVIEWER_RESPONSE_LANGUAGE"

# Default language for commits
COMMIT_REVIEWER_COMMIT_LANGUAGE=${COMMIT_REVIEWER_COMMIT_LANGUAGE:-"en"}
log_debug "COMMIT_REVIEWER_COMMIT_LANGUAGE=$COMMIT_REVIEWER_COMMIT_LANGUAGE"

# Default OpenAI API URL if not set
COMMIT_REVIEWER_API_URL=${COMMIT_REVIEWER_API_URL:-"https://api.openai.com/v1/chat/completions"}
log_debug "Using OpenAI API URL: $COMMIT_REVIEWER_API_URL"

# This not working yet
# Check if this is an amend commit and if we should skip validation
if git rev-parse -q --verify HEAD >/dev/null && [ "$(git rev-parse HEAD)" = "$(git rev-parse ORIG_HEAD 2>/dev/null || echo '')" ]; then
  log_debug "This is an amend commit"
  # If COMMIT_REVIEWER_SKIP_AMEND is set to "true", skip validation for amend commits
  if [ "$COMMIT_REVIEWER_SKIP_AMEND" = "true" ]; then
    log_info "Skipping validation for amend commit"
    exit 0
  fi
else
  log_debug "This is a new commit"
fi

# Read commit message and clean it
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE" | grep -v "^#" | sed '/^$/d' | head -n 1)
log_debug "Cleaned commit message: $COMMIT_MSG"

# If commit message is empty, exit successfully
if [ -z "$COMMIT_MSG" ]; then
  log_info "Empty commit message, exiting"
  exit 0
fi

# Check if commit message contains "wip" or "WIP" (case insensitive)
if [ "$COMMIT_REVIEWER_SKIP_WIP" = "true" ] && echo "$COMMIT_MSG" | grep -qi "wip"; then
  log_info "Commit message contains 'WIP', skipping validation"
  exit 0
fi

# Default system prompts if not set
COMMIT_REVIEWER_SYSTEM_PROMPT=${COMMIT_REVIEWER_SYSTEM_PROMPT:-"You are a helpful assistant that reviews Git commit messages. Review the following commit message based on the following criteria: 1. Check if it follows the Conventional Commits specification (type, scope, subject format). 2. Verify that the message is clear, concise, and written in correct $COMMIT_REVIEWER_COMMIT_LANGUAGE. 3. If the message does not meet these standards, suggest 2-3 alternative improved versions. 4. If the message is acceptable, explicitly approve it and explain why it's good. 5. Respond in $COMMIT_REVIEWER_RESPONSE_LANGUAGE language."}
log_debug "Using system prompt"

COMMIT_REVIEWER_FORMATTER_PROMPT=${COMMIT_REVIEWER_FORMATTER_PROMPT:-"You are a response formatter. Format the following review with these rules:
1. If the message is approved, start with ✅ APPROVED: followed by the explanation
2. If there are issues but they are minor, start with ⚠️ WARNING: followed by the issues and suggestions
3. If there are serious issues, start with ❌ REJECTED: followed by the issues and suggestions
4. Keep the original formatting and content, just add the appropriate prefix
5. Respond in $COMMIT_REVIEWER_RESPONSE_LANGUAGE language"}
log_debug "Using formatter prompt"

# Use COMMIT_REVIEWER_API_KEY if set, otherwise fall back to OPENAI_API_KEY
API_KEY=${COMMIT_REVIEWER_API_KEY:-$OPENAI_API_KEY}
log_debug "API key length: ${#API_KEY}"

check_api_config

# Escape special characters in the commit message and system prompts
ESCAPED_MSG=$(echo "$COMMIT_MSG" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
ESCAPED_REVIEWER_PROMPT=$(echo "$COMMIT_REVIEWER_SYSTEM_PROMPT" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
ESCAPED_FORMATTER_PROMPT=$(echo "$COMMIT_REVIEWER_FORMATTER_PROMPT" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
log_debug "Escaped messages and prompts"

# Create JSON payload
JSON_PAYLOAD=$(cat <<EOF
{
  "model": "gpt-4",
  "messages": [
    {"role": "system", "content": "$ESCAPED_REVIEWER_PROMPT"},
    {"role": "system", "content": "$ESCAPED_FORMATTER_PROMPT"}, 
    {"role": "user", "content": "$ESCAPED_MSG"}
  ],
  "temperature": 0.2
}
EOF
)
log_debug "Created JSON payload"

# Validate JSON payload
if ! echo "$JSON_PAYLOAD" | jq '.' >/dev/null 2>&1; then
  log_error "Invalid JSON payload"
  echo "JSON payload:"
  echo "$JSON_PAYLOAD"
  echo "Validation error:"
  echo "$JSON_PAYLOAD" | jq '.' 2>&1
  exit 1
fi
log_debug "JSON payload validated"

# Loading animation function
show_loading() {
  local delay=0.1
  local spinstr='-\|/'
  while true; do
    for (( i=0; i<${#spinstr}; i++ )); do
      printf "\rAnalyzing commit message... [%c]  " "${spinstr:$i:1}"
      sleep $delay
      printf "\033[K"  # Clear the rest of the line
    done
  done
}

# Start loading animation in background
show_loading &
LOADING_PID=$!
log_debug "Started loading animation"

# Review the message with AI
log_info "Sending request to OpenAI API"
RESPONSE=$(curl -s -w "\n%{http_code}" --max-time 30 "$COMMIT_REVIEWER_API_URL" \
  -H "Authorization: Bearer $API_KEY" \
  -H "Content-Type: application/json" \
  -d "$JSON_PAYLOAD")
CURL_EXIT_CODE=$?
log_debug "Received response from OpenAI API (curl exit code: $CURL_EXIT_CODE)"

# Kill loading animation
kill $LOADING_PID 2>/dev/null
wait $LOADING_PID 2>/dev/null
printf "\rAnalyzing commit message... Done!    \n"

if [ $CURL_EXIT_CODE -ne 0 ]; then
  log_error "Failed to connect to OpenAI API (curl exit code: $CURL_EXIT_CODE)"
  log_error "Please check your internet connection and API URL"
  exit 1
fi

HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
log_debug "HTTP response code: $HTTP_CODE"

if [ "$HTTP_CODE" -ne 200 ]; then
  log_error "API request failed with status code $HTTP_CODE"
  echo "Response body:"
  echo "$RESPONSE_BODY"
  echo "Debug info:"
  echo "- API Key length: ${#API_KEY}"
  echo "- Commit message length: ${#COMMIT_MSG}"
  echo "- System prompt length: ${#COMMIT_REVIEWER_SYSTEM_PROMPT}"
  echo "- JSON payload:"
  echo "$JSON_PAYLOAD"
  exit 1
fi

REVIEW=$(echo "$RESPONSE_BODY" | jq -r '.choices[0].message.content')
log_debug "Extracted review from response"

if [ -z "$REVIEW" ] || [ "$REVIEW" = "null" ]; then
  log_error "Failed to extract review from API response"
  echo "Response body:"
  echo "$RESPONSE_BODY"
  exit 1
fi

echo "==============================="
echo "AI Review:"
echo "$REVIEW"
echo "==============================="

# Force input from terminal
exec < /dev/tty
log_debug "Waiting for user input"

echo "Do you want to proceed with the commit? (y/n)"
while true; do
  read -p "> " answer
  case $answer in
    [Yy]* ) log_info "User approved commit"; exit 0;;
    [Nnq]* ) log_info "User rejected commit"; echo "Commit cancelled."; exit 1;;
    * ) echo "Please answer y or n.";;
  esac
done